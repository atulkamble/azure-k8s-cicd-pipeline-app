trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'azure-aks-connection'        # Your Azure RM service connection name
  acrLoginServer: 'atulkamble.azurecr.io'
  acrUsername: 'atulkamble'
  acrPassword: '$(acrPassword)'                    # Set this secret in Azure DevOps Pipeline Variables
  kubernetesCluster: 'aks-cluster'
  resourceGroup: 'aks-resource-group'

stages:
  - stage: Build
    displayName: Build and Push Docker Images
    jobs:
      - job: BuildAndPush
        displayName: Docker Build and Push
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: '$(acrLoginServer)'
              username: '$(acrUsername)'
              password: '$(acrPassword)'

          - task: Docker@2
            displayName: Build and Push Frontend Image
            inputs:
              command: buildAndPush
              repository: 'frontend'
              dockerfile: 'frontend/Dockerfile'
              containerRegistry: '$(acrLoginServer)'
              tags: 'latest'
              buildContext: 'frontend'

          - task: Docker@2
            displayName: Build and Push Backend Image
            inputs:
              command: buildAndPush
              repository: 'backend'
              dockerfile: 'backend/Dockerfile'
              containerRegistry: '$(acrLoginServer)'
              tags: 'latest'
              buildContext: 'backend'

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: Build
    jobs:
      - job: DeployToAKS
        displayName: Apply Kubernetes Manifests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: AKS Login and Set Context
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(resourceGroup) --name $(kubernetesCluster) --overwrite-existing
                kubectl apply -f manifests/full.yaml
